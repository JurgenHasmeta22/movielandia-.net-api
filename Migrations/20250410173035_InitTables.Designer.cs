// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using movielandia_.net_api.Data;

#nullable disable

namespace movielandia_.net_api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250410173035_InitTables")]
    partial class InitTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ForumTagForumTopic", b =>
                {
                    b.Property<int>("TagsId")
                        .HasColumnType("int");

                    b.Property<int>("TopicsId")
                        .HasColumnType("int");

                    b.HasKey("TagsId", "TopicsId");

                    b.HasIndex("TopicsId");

                    b.ToTable("ForumTagForumTopic");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.Actor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Debut")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoSrc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoSrcProd")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Actor", (string)null);
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.ActorReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActorId")
                        .HasColumnType("int");

                    b.Property<int?>("ActorId1")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<float?>("Rating")
                        .HasColumnType("real");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActorId");

                    b.HasIndex("ActorId1");

                    b.HasIndex("UserId");

                    b.ToTable("ActorReview", (string)null);
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.Attachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FileSize")
                        .HasColumnType("int");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Attachment");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.Avatar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("PhotoSrc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Avatar", (string)null);
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.CastMovie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActorId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActorId");

                    b.HasIndex("MovieId");

                    b.ToTable("CastMovie", (string)null);
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.CastSerie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActorId")
                        .HasColumnType("int");

                    b.Property<int>("SerieId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActorId");

                    b.HasIndex("SerieId");

                    b.ToTable("CastSerie", (string)null);
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.Crew", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Debut")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoSrc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoSrcProd")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Crew", (string)null);
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.CrewMovie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CrewId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CrewId");

                    b.HasIndex("MovieId");

                    b.ToTable("CrewMovie", (string)null);
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.CrewReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CrewId")
                        .HasColumnType("int");

                    b.Property<int?>("CrewId1")
                        .HasColumnType("int");

                    b.Property<float?>("Rating")
                        .HasColumnType("real");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CrewId");

                    b.HasIndex("CrewId1");

                    b.HasIndex("UserId");

                    b.ToTable("CrewReview", (string)null);
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.CrewSerie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CrewId")
                        .HasColumnType("int");

                    b.Property<int>("SerieId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CrewId");

                    b.HasIndex("SerieId");

                    b.ToTable("CrewSerie", (string)null);
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.DownvoteActorReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActorId")
                        .HasColumnType("int");

                    b.Property<int>("ActorReviewId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActorId");

                    b.HasIndex("ActorReviewId");

                    b.HasIndex("UserId");

                    b.ToTable("DownvoteActorReview", (string)null);
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.DownvoteCrewReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CrewId")
                        .HasColumnType("int");

                    b.Property<int>("CrewReviewId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CrewId");

                    b.HasIndex("CrewReviewId");

                    b.HasIndex("UserId");

                    b.ToTable("DownvoteCrewReview");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.DownvoteEpisodeReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EpisodeId")
                        .HasColumnType("int");

                    b.Property<int>("EpisodeReviewId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EpisodeId");

                    b.HasIndex("EpisodeReviewId");

                    b.HasIndex("UserId");

                    b.ToTable("DownvoteEpisodeReview", (string)null);
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.DownvoteForumPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ForumPostId")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ForumPostId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("DownvoteForumPost");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.DownvoteForumReply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ForumReplyId")
                        .HasColumnType("int");

                    b.Property<int>("ReplyId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ForumReplyId");

                    b.HasIndex("ReplyId");

                    b.HasIndex("UserId");

                    b.ToTable("DownvoteForumReply");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.DownvoteForumTopic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ForumTopicId")
                        .HasColumnType("int");

                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ForumTopicId");

                    b.HasIndex("TopicId");

                    b.HasIndex("UserId");

                    b.ToTable("DownvoteForumTopic");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.DownvoteMovieReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("MovieReviewId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("MovieReviewId");

                    b.HasIndex("UserId");

                    b.ToTable("DownvoteMovieReview", (string)null);
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.DownvoteSeasonReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<int>("SeasonReviewId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId");

                    b.HasIndex("SeasonReviewId");

                    b.HasIndex("UserId");

                    b.ToTable("DownvoteSeasonReview", (string)null);
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.DownvoteSerieReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("SerieId")
                        .HasColumnType("int");

                    b.Property<int>("SerieReviewId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SerieId");

                    b.HasIndex("SerieReviewId");

                    b.HasIndex("UserId");

                    b.ToTable("DownvoteSerieReview", (string)null);
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.Episode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateAired")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("PhotoSrc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoSrcProd")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("RatingImdb")
                        .HasColumnType("real");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrailerSrc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId");

                    b.ToTable("Episode", (string)null);
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.EpisodeReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EpisodeId")
                        .HasColumnType("int");

                    b.Property<int?>("EpisodeId1")
                        .HasColumnType("int");

                    b.Property<float?>("Rating")
                        .HasColumnType("real");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EpisodeId");

                    b.HasIndex("EpisodeId1");

                    b.HasIndex("UserId");

                    b.ToTable("EpisodeReview", (string)null);
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.ForumCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastPostAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastPostId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("PostCount")
                        .HasColumnType("int");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TopicCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LastPostId")
                        .IsUnique()
                        .HasFilter("[LastPostId] IS NOT NULL");

                    b.ToTable("ForumCategory");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.ForumPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AnsweredAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("AnsweredById")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedById")
                        .HasColumnType("int");

                    b.Property<int>("EditCount")
                        .HasColumnType("int");

                    b.Property<int?>("ForumTopicId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAnswer")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("bit");

                    b.Property<bool>("IsModerated")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastEditAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AnsweredById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("ForumTopicId");

                    b.HasIndex("TopicId");

                    b.HasIndex("UserId");

                    b.ToTable("ForumPost");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.ForumPostHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EditedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EditedById")
                        .HasColumnType("int");

                    b.Property<int?>("ForumPostId")
                        .HasColumnType("int");

                    b.Property<string>("NewContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EditedById");

                    b.HasIndex("ForumPostId");

                    b.HasIndex("PostId");

                    b.ToTable("ForumPostHistory");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.ForumReply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EditCount")
                        .HasColumnType("int");

                    b.Property<int?>("ForumPostId")
                        .HasColumnType("int");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("bit");

                    b.Property<bool>("IsModerated")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastEditAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ForumPostId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("ForumReply");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.ForumReplyHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EditedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EditedById")
                        .HasColumnType("int");

                    b.Property<int?>("ForumReplyId")
                        .HasColumnType("int");

                    b.Property<string>("NewContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReplyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EditedById");

                    b.HasIndex("ForumReplyId");

                    b.HasIndex("ReplyId");

                    b.ToTable("ForumReplyHistory");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.ForumTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ForumTag");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.ForumTopic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ClosedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ForumCategoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsModerated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPinned")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastPostAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ClosedById");

                    b.HasIndex("ForumCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("ForumTopic");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genre", (string)null);
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.Inbox", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Inbox");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("InboxId")
                        .HasColumnType("int");

                    b.Property<int?>("InboxId1")
                        .HasColumnType("int");

                    b.Property<bool>("Read")
                        .HasColumnType("bit");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InboxId");

                    b.HasIndex("InboxId1");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.HasIndex("UserId");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateAired")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("PhotoSrc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoSrcProd")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("RatingImdb")
                        .HasColumnType("real");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrailerSrc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Movie", (string)null);
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.MovieGenre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieGenre", (string)null);
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.MovieReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int?>("MovieId1")
                        .HasColumnType("int");

                    b.Property<float?>("Rating")
                        .HasColumnType("real");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("MovieId1");

                    b.HasIndex("UserId");

                    b.ToTable("MovieReview", (string)null);
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.Season", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateAired")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoSrc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoSrcProd")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("RatingImdb")
                        .HasColumnType("real");

                    b.Property<int>("SerieId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrailerSrc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SerieId");

                    b.ToTable("Season", (string)null);
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.SeasonReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<float?>("Rating")
                        .HasColumnType("real");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<int?>("SeasonId1")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId");

                    b.HasIndex("SeasonId1");

                    b.HasIndex("UserId");

                    b.ToTable("SeasonReview", (string)null);
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.Serie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateAired")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoSrc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoSrcProd")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("RatingImdb")
                        .HasColumnType("real");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrailerSrc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Serie", (string)null);
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.SerieGenre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<int>("SerieId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.HasIndex("SerieId");

                    b.ToTable("SerieGenre", (string)null);
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.SerieReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<float?>("Rating")
                        .HasColumnType("real");

                    b.Property<int>("SerieId")
                        .HasColumnType("int");

                    b.Property<int?>("SerieId1")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SerieId");

                    b.HasIndex("SerieId1");

                    b.HasIndex("UserId");

                    b.ToTable("SerieReview", (string)null);
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UpvoteActorReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActorId")
                        .HasColumnType("int");

                    b.Property<int>("ActorReviewId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActorId");

                    b.HasIndex("ActorReviewId");

                    b.HasIndex("UserId");

                    b.ToTable("UpvoteActorReview", (string)null);
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UpvoteCrewReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CrewId")
                        .HasColumnType("int");

                    b.Property<int>("CrewReviewId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CrewId");

                    b.HasIndex("CrewReviewId");

                    b.HasIndex("UserId");

                    b.ToTable("UpvoteCrewReview");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UpvoteEpisodeReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EpisodeId")
                        .HasColumnType("int");

                    b.Property<int>("EpisodeReviewId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EpisodeId");

                    b.HasIndex("EpisodeReviewId");

                    b.HasIndex("UserId");

                    b.ToTable("UpvoteEpisodeReview", (string)null);
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UpvoteForumPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ForumPostId")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ForumPostId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("UpvoteForumPost");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UpvoteForumReply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ForumReplyId")
                        .HasColumnType("int");

                    b.Property<int>("ReplyId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ForumReplyId");

                    b.HasIndex("ReplyId");

                    b.HasIndex("UserId");

                    b.ToTable("UpvoteForumReply");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UpvoteForumTopic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ForumTopicId")
                        .HasColumnType("int");

                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ForumTopicId");

                    b.HasIndex("TopicId");

                    b.HasIndex("UserId");

                    b.ToTable("UpvoteForumTopic");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UpvoteMovieReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("MovieReviewId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("MovieReviewId");

                    b.HasIndex("UserId");

                    b.ToTable("UpvoteMovieReview", (string)null);
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UpvoteSeasonReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<int>("SeasonReviewId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId");

                    b.HasIndex("SeasonReviewId");

                    b.HasIndex("UserId");

                    b.ToTable("UpvoteSeasonReview", (string)null);
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UpvoteSerieReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("SerieId")
                        .HasColumnType("int");

                    b.Property<int>("SerieReviewId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SerieId");

                    b.HasIndex("SerieReviewId");

                    b.HasIndex("UserId");

                    b.ToTable("UpvoteSerieReview", (string)null);
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<bool>("CanResetPassword")
                        .HasColumnType("bit");

                    b.Property<string>("CountryFrom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<bool>("Subscribed")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UserActorFavorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActorId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActorId");

                    b.HasIndex("UserId");

                    b.ToTable("UserActorFavorite", (string)null);
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UserActorRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActorId")
                        .HasColumnType("int");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActorId");

                    b.HasIndex("UserId");

                    b.ToTable("UserActorRating", (string)null);
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UserCrewFavorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CrewId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CrewId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCrewFavorite", (string)null);
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UserCrewRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CrewId")
                        .HasColumnType("int");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CrewId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCrewRating", (string)null);
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UserEpisodeFavorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EpisodeId")
                        .HasColumnType("int");

                    b.Property<int?>("EpisodeId1")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EpisodeId");

                    b.HasIndex("EpisodeId1");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("UserEpisodeFavorite", (string)null);
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UserEpisodeRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EpisodeId")
                        .HasColumnType("int");

                    b.Property<int?>("EpisodeId1")
                        .HasColumnType("int");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EpisodeId");

                    b.HasIndex("EpisodeId1");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("UserEpisodeRating", (string)null);
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UserForumModerator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ForumCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ForumCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("UserForumModerator");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UserForumTopicFavorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ForumTopicId")
                        .HasColumnType("int");

                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ForumTopicId");

                    b.HasIndex("TopicId");

                    b.HasIndex("UserId");

                    b.ToTable("UserForumTopicFavorite");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UserForumTopicWatch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ForumTopicId")
                        .HasColumnType("int");

                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ForumTopicId");

                    b.HasIndex("TopicId");

                    b.HasIndex("UserId");

                    b.ToTable("UserForumTopicWatch");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UserGenreFavorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.HasIndex("UserId");

                    b.ToTable("UserGenreFavorite", (string)null);
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UserInbox", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("InboxId")
                        .HasColumnType("int");

                    b.Property<int?>("InboxId1")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InboxId");

                    b.HasIndex("InboxId1");

                    b.HasIndex("UserId");

                    b.ToTable("UserInbox");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UserMovieFavorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId", "MovieId")
                        .IsUnique();

                    b.ToTable("UserMovieFavorite", (string)null);
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UserMovieRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId");

                    b.ToTable("UserMovieRating", (string)null);
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UserSeasonFavorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSeasonFavorite", (string)null);
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UserSeasonRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSeasonRating", (string)null);
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UserSerieFavorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("SerieId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SerieId");

                    b.HasIndex("UserId", "SerieId")
                        .IsUnique();

                    b.ToTable("UserSerieFavorite", (string)null);
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UserSerieRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<int>("SerieId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SerieId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSerieRating", (string)null);
                });

            modelBuilder.Entity("ForumTagForumTopic", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.ForumTag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.ForumTopic", null)
                        .WithMany()
                        .HasForeignKey("TopicsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.ActorReview", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Actor", "Actor")
                        .WithMany()
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.Actor", null)
                        .WithMany("Reviews")
                        .HasForeignKey("ActorId1");

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithMany("ActorReviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.Attachment", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.ForumPost", "Post")
                        .WithMany("Attachments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.Avatar", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithOne("Avatar")
                        .HasForeignKey("movielandia_.net_api.Models.Domain.Avatar", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.CastMovie", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Actor", "Actor")
                        .WithMany("StarredMovies")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.Movie", "Movie")
                        .WithMany("Cast")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.CastSerie", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Actor", "Actor")
                        .WithMany("StarredSeries")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.Serie", "Serie")
                        .WithMany("Cast")
                        .HasForeignKey("SerieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Serie");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.CrewMovie", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Crew", "Crew")
                        .WithMany("ProducedMovies")
                        .HasForeignKey("CrewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.Movie", "Movie")
                        .WithMany("Crew")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crew");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.CrewReview", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Crew", "Crew")
                        .WithMany()
                        .HasForeignKey("CrewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.Crew", null)
                        .WithMany("Reviews")
                        .HasForeignKey("CrewId1");

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithMany("CrewReviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Crew");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.CrewSerie", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Crew", "Crew")
                        .WithMany("ProducedSeries")
                        .HasForeignKey("CrewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.Serie", "Serie")
                        .WithMany("Crew")
                        .HasForeignKey("SerieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crew");

                    b.Navigation("Serie");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.DownvoteActorReview", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Actor", "Actor")
                        .WithMany("DownvoteActorReviews")
                        .HasForeignKey("ActorId")
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.ActorReview", "ActorReview")
                        .WithMany("Downvotes")
                        .HasForeignKey("ActorReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("ActorReview");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.DownvoteCrewReview", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Crew", "Crew")
                        .WithMany("DownvoteCrewReviews")
                        .HasForeignKey("CrewId")
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.CrewReview", "CrewReview")
                        .WithMany("Downvotes")
                        .HasForeignKey("CrewReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Crew");

                    b.Navigation("CrewReview");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.DownvoteEpisodeReview", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Episode", "Episode")
                        .WithMany("DownvoteEpisodeReviews")
                        .HasForeignKey("EpisodeId")
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.EpisodeReview", "EpisodeReview")
                        .WithMany("Downvotes")
                        .HasForeignKey("EpisodeReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Episode");

                    b.Navigation("EpisodeReview");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.DownvoteForumPost", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.ForumPost", null)
                        .WithMany("Downvotes")
                        .HasForeignKey("ForumPostId");

                    b.HasOne("movielandia_.net_api.Models.Domain.ForumPost", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.DownvoteForumReply", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.ForumReply", null)
                        .WithMany("Downvotes")
                        .HasForeignKey("ForumReplyId");

                    b.HasOne("movielandia_.net_api.Models.Domain.ForumReply", "Reply")
                        .WithMany()
                        .HasForeignKey("ReplyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reply");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.DownvoteForumTopic", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.ForumTopic", null)
                        .WithMany("Downvotes")
                        .HasForeignKey("ForumTopicId");

                    b.HasOne("movielandia_.net_api.Models.Domain.ForumTopic", "Topic")
                        .WithMany()
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.DownvoteMovieReview", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Movie", "Movie")
                        .WithMany("DownvoteMovieReviews")
                        .HasForeignKey("MovieId")
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.MovieReview", "MovieReview")
                        .WithMany("Downvotes")
                        .HasForeignKey("MovieReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("MovieReview");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.DownvoteSeasonReview", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Season", "Season")
                        .WithMany("DownvoteSeasonReviews")
                        .HasForeignKey("SeasonId")
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.SeasonReview", "SeasonReview")
                        .WithMany("Downvotes")
                        .HasForeignKey("SeasonReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Season");

                    b.Navigation("SeasonReview");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.DownvoteSerieReview", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Serie", "Serie")
                        .WithMany("DownvoteSerieReviews")
                        .HasForeignKey("SerieId")
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.SerieReview", "SerieReview")
                        .WithMany("Downvotes")
                        .HasForeignKey("SerieReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Serie");

                    b.Navigation("SerieReview");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.Episode", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Season", "Season")
                        .WithMany("Episodes")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.EpisodeReview", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Episode", "Episode")
                        .WithMany()
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.Episode", null)
                        .WithMany("Reviews")
                        .HasForeignKey("EpisodeId1");

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithMany("EpisodeReviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Episode");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.ForumCategory", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.ForumPost", "LastPost")
                        .WithOne("LastPostCategory")
                        .HasForeignKey("movielandia_.net_api.Models.Domain.ForumCategory", "LastPostId");

                    b.Navigation("LastPost");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.ForumPost", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.User", "AnsweredBy")
                        .WithMany()
                        .HasForeignKey("AnsweredById");

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.HasOne("movielandia_.net_api.Models.Domain.ForumTopic", null)
                        .WithMany("Posts")
                        .HasForeignKey("ForumTopicId");

                    b.HasOne("movielandia_.net_api.Models.Domain.ForumTopic", "Topic")
                        .WithMany()
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AnsweredBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("Topic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.ForumPostHistory", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.User", "EditedBy")
                        .WithMany()
                        .HasForeignKey("EditedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.ForumPost", null)
                        .WithMany("History")
                        .HasForeignKey("ForumPostId");

                    b.HasOne("movielandia_.net_api.Models.Domain.ForumPost", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditedBy");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.ForumReply", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.ForumPost", null)
                        .WithMany("Replies")
                        .HasForeignKey("ForumPostId");

                    b.HasOne("movielandia_.net_api.Models.Domain.ForumPost", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.ForumReplyHistory", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.User", "EditedBy")
                        .WithMany()
                        .HasForeignKey("EditedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.ForumReply", null)
                        .WithMany("History")
                        .HasForeignKey("ForumReplyId");

                    b.HasOne("movielandia_.net_api.Models.Domain.ForumReply", "Reply")
                        .WithMany()
                        .HasForeignKey("ReplyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EditedBy");

                    b.Navigation("Reply");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.ForumTopic", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.ForumCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "ClosedBy")
                        .WithMany()
                        .HasForeignKey("ClosedById");

                    b.HasOne("movielandia_.net_api.Models.Domain.ForumCategory", null)
                        .WithMany("Topics")
                        .HasForeignKey("ForumCategoryId");

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("ClosedBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.Message", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Inbox", "Inbox")
                        .WithMany()
                        .HasForeignKey("InboxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.Inbox", null)
                        .WithMany("Messages")
                        .HasForeignKey("InboxId1");

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Inbox");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.MovieGenre", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Genre", "Genre")
                        .WithMany("Movies")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.Movie", "Movie")
                        .WithMany("Genres")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.MovieReview", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.Movie", null)
                        .WithMany("Reviews")
                        .HasForeignKey("MovieId1");

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithMany("MovieReviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.Season", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Serie", "Serie")
                        .WithMany("Seasons")
                        .HasForeignKey("SerieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Serie");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.SeasonReview", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Season", "Season")
                        .WithMany()
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.Season", null)
                        .WithMany("Reviews")
                        .HasForeignKey("SeasonId1");

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithMany("SeasonReviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Season");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.SerieGenre", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Genre", "Genre")
                        .WithMany("Series")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.Serie", "Serie")
                        .WithMany("Genres")
                        .HasForeignKey("SerieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Serie");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.SerieReview", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Serie", "Serie")
                        .WithMany()
                        .HasForeignKey("SerieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.Serie", null)
                        .WithMany("Reviews")
                        .HasForeignKey("SerieId1");

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithMany("SerieReviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Serie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UpvoteActorReview", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Actor", "Actor")
                        .WithMany("UpvoteActorReviews")
                        .HasForeignKey("ActorId")
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.ActorReview", "ActorReview")
                        .WithMany("Upvotes")
                        .HasForeignKey("ActorReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("ActorReview");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UpvoteCrewReview", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Crew", "Crew")
                        .WithMany("UpvoteCrewReviews")
                        .HasForeignKey("CrewId")
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.CrewReview", "CrewReview")
                        .WithMany("Upvotes")
                        .HasForeignKey("CrewReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Crew");

                    b.Navigation("CrewReview");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UpvoteEpisodeReview", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Episode", "Episode")
                        .WithMany("UpvoteEpisodeReviews")
                        .HasForeignKey("EpisodeId")
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.EpisodeReview", "EpisodeReview")
                        .WithMany("Upvotes")
                        .HasForeignKey("EpisodeReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Episode");

                    b.Navigation("EpisodeReview");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UpvoteForumPost", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.ForumPost", null)
                        .WithMany("Upvotes")
                        .HasForeignKey("ForumPostId");

                    b.HasOne("movielandia_.net_api.Models.Domain.ForumPost", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UpvoteForumReply", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.ForumReply", null)
                        .WithMany("Upvotes")
                        .HasForeignKey("ForumReplyId");

                    b.HasOne("movielandia_.net_api.Models.Domain.ForumReply", "Reply")
                        .WithMany()
                        .HasForeignKey("ReplyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reply");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UpvoteForumTopic", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.ForumTopic", null)
                        .WithMany("Upvotes")
                        .HasForeignKey("ForumTopicId");

                    b.HasOne("movielandia_.net_api.Models.Domain.ForumTopic", "Topic")
                        .WithMany()
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UpvoteMovieReview", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Movie", "Movie")
                        .WithMany("UpvoteMovieReviews")
                        .HasForeignKey("MovieId")
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.MovieReview", "MovieReview")
                        .WithMany("Upvotes")
                        .HasForeignKey("MovieReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("MovieReview");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UpvoteSeasonReview", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Season", "Season")
                        .WithMany("UpvoteSeasonReviews")
                        .HasForeignKey("SeasonId")
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.SeasonReview", "SeasonReview")
                        .WithMany("Upvotes")
                        .HasForeignKey("SeasonReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Season");

                    b.Navigation("SeasonReview");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UpvoteSerieReview", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Serie", "Serie")
                        .WithMany("UpvoteSerieReviews")
                        .HasForeignKey("SerieId")
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.SerieReview", "SerieReview")
                        .WithMany("Upvotes")
                        .HasForeignKey("SerieReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Serie");

                    b.Navigation("SerieReview");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UserActorFavorite", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Actor", "Actor")
                        .WithMany("UsersWhoBookmarkedIt")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithMany("FavActors")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UserActorRating", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Actor", "Actor")
                        .WithMany("UsersWhoRatedIt")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithMany("RatingsInActor")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UserCrewFavorite", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Crew", "Crew")
                        .WithMany("UsersWhoBookmarkedIt")
                        .HasForeignKey("CrewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithMany("FavCrew")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crew");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UserCrewRating", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Crew", "Crew")
                        .WithMany("UsersWhoRatedIt")
                        .HasForeignKey("CrewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithMany("RatingsInCrew")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crew");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UserEpisodeFavorite", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Episode", "Episode")
                        .WithMany()
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.Episode", null)
                        .WithMany("UsersWhoBookmarkedIt")
                        .HasForeignKey("EpisodeId1");

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.User", null)
                        .WithMany("FavEpisodes")
                        .HasForeignKey("UserId1");

                    b.Navigation("Episode");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UserEpisodeRating", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Episode", "Episode")
                        .WithMany()
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.Episode", null)
                        .WithMany("UsersWhoRatedIt")
                        .HasForeignKey("EpisodeId1");

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.User", null)
                        .WithMany("RatingsInEpisode")
                        .HasForeignKey("UserId1");

                    b.Navigation("Episode");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UserForumModerator", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.ForumCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.ForumCategory", null)
                        .WithMany("Moderators")
                        .HasForeignKey("ForumCategoryId");

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UserForumTopicFavorite", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.ForumTopic", null)
                        .WithMany("UsersWhoBookmarkedIt")
                        .HasForeignKey("ForumTopicId");

                    b.HasOne("movielandia_.net_api.Models.Domain.ForumTopic", "Topic")
                        .WithMany()
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UserForumTopicWatch", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.ForumTopic", null)
                        .WithMany("Watchers")
                        .HasForeignKey("ForumTopicId");

                    b.HasOne("movielandia_.net_api.Models.Domain.ForumTopic", "Topic")
                        .WithMany()
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topic");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UserGenreFavorite", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Genre", "Genre")
                        .WithMany("UsersWhoBookmarkedIt")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithMany("FavGenres")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UserInbox", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Inbox", "Inbox")
                        .WithMany()
                        .HasForeignKey("InboxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.Inbox", null)
                        .WithMany("Participants")
                        .HasForeignKey("InboxId1");

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inbox");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UserMovieFavorite", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Movie", "Movie")
                        .WithMany("UsersWhoBookmarkedIt")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithMany("FavMovies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UserMovieRating", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Movie", "Movie")
                        .WithMany("UsersWhoRatedIt")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithMany("RatingsInMovie")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UserSeasonFavorite", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Season", "Season")
                        .WithMany("UsersWhoBookmarkedIt")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithMany("FavSeasons")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UserSeasonRating", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Season", "Season")
                        .WithMany("UsersWhoRatedIt")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithMany("RatingsInSeason")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UserSerieFavorite", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Serie", "Serie")
                        .WithMany("UsersWhoBookmarkedIt")
                        .HasForeignKey("SerieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithMany("FavSeries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Serie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UserSerieRating", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Serie", "Serie")
                        .WithMany("UsersWhoRatedIt")
                        .HasForeignKey("SerieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithMany("RatingsInSerie")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Serie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.Actor", b =>
                {
                    b.Navigation("DownvoteActorReviews");

                    b.Navigation("Reviews");

                    b.Navigation("StarredMovies");

                    b.Navigation("StarredSeries");

                    b.Navigation("UpvoteActorReviews");

                    b.Navigation("UsersWhoBookmarkedIt");

                    b.Navigation("UsersWhoRatedIt");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.ActorReview", b =>
                {
                    b.Navigation("Downvotes");

                    b.Navigation("Upvotes");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.Crew", b =>
                {
                    b.Navigation("DownvoteCrewReviews");

                    b.Navigation("ProducedMovies");

                    b.Navigation("ProducedSeries");

                    b.Navigation("Reviews");

                    b.Navigation("UpvoteCrewReviews");

                    b.Navigation("UsersWhoBookmarkedIt");

                    b.Navigation("UsersWhoRatedIt");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.CrewReview", b =>
                {
                    b.Navigation("Downvotes");

                    b.Navigation("Upvotes");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.Episode", b =>
                {
                    b.Navigation("DownvoteEpisodeReviews");

                    b.Navigation("Reviews");

                    b.Navigation("UpvoteEpisodeReviews");

                    b.Navigation("UsersWhoBookmarkedIt");

                    b.Navigation("UsersWhoRatedIt");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.EpisodeReview", b =>
                {
                    b.Navigation("Downvotes");

                    b.Navigation("Upvotes");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.ForumCategory", b =>
                {
                    b.Navigation("Moderators");

                    b.Navigation("Topics");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.ForumPost", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Downvotes");

                    b.Navigation("History");

                    b.Navigation("LastPostCategory")
                        .IsRequired();

                    b.Navigation("Replies");

                    b.Navigation("Upvotes");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.ForumReply", b =>
                {
                    b.Navigation("Downvotes");

                    b.Navigation("History");

                    b.Navigation("Upvotes");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.ForumTopic", b =>
                {
                    b.Navigation("Downvotes");

                    b.Navigation("Posts");

                    b.Navigation("Upvotes");

                    b.Navigation("UsersWhoBookmarkedIt");

                    b.Navigation("Watchers");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.Genre", b =>
                {
                    b.Navigation("Movies");

                    b.Navigation("Series");

                    b.Navigation("UsersWhoBookmarkedIt");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.Inbox", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Participants");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.Movie", b =>
                {
                    b.Navigation("Cast");

                    b.Navigation("Crew");

                    b.Navigation("DownvoteMovieReviews");

                    b.Navigation("Genres");

                    b.Navigation("Reviews");

                    b.Navigation("UpvoteMovieReviews");

                    b.Navigation("UsersWhoBookmarkedIt");

                    b.Navigation("UsersWhoRatedIt");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.MovieReview", b =>
                {
                    b.Navigation("Downvotes");

                    b.Navigation("Upvotes");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.Season", b =>
                {
                    b.Navigation("DownvoteSeasonReviews");

                    b.Navigation("Episodes");

                    b.Navigation("Reviews");

                    b.Navigation("UpvoteSeasonReviews");

                    b.Navigation("UsersWhoBookmarkedIt");

                    b.Navigation("UsersWhoRatedIt");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.SeasonReview", b =>
                {
                    b.Navigation("Downvotes");

                    b.Navigation("Upvotes");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.Serie", b =>
                {
                    b.Navigation("Cast");

                    b.Navigation("Crew");

                    b.Navigation("DownvoteSerieReviews");

                    b.Navigation("Genres");

                    b.Navigation("Reviews");

                    b.Navigation("Seasons");

                    b.Navigation("UpvoteSerieReviews");

                    b.Navigation("UsersWhoBookmarkedIt");

                    b.Navigation("UsersWhoRatedIt");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.SerieReview", b =>
                {
                    b.Navigation("Downvotes");

                    b.Navigation("Upvotes");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.User", b =>
                {
                    b.Navigation("ActorReviews");

                    b.Navigation("Avatar")
                        .IsRequired();

                    b.Navigation("CrewReviews");

                    b.Navigation("EpisodeReviews");

                    b.Navigation("FavActors");

                    b.Navigation("FavCrew");

                    b.Navigation("FavEpisodes");

                    b.Navigation("FavGenres");

                    b.Navigation("FavMovies");

                    b.Navigation("FavSeasons");

                    b.Navigation("FavSeries");

                    b.Navigation("MovieReviews");

                    b.Navigation("RatingsInActor");

                    b.Navigation("RatingsInCrew");

                    b.Navigation("RatingsInEpisode");

                    b.Navigation("RatingsInMovie");

                    b.Navigation("RatingsInSeason");

                    b.Navigation("RatingsInSerie");

                    b.Navigation("SeasonReviews");

                    b.Navigation("SerieReviews");
                });
#pragma warning restore 612, 618
        }
    }
}
