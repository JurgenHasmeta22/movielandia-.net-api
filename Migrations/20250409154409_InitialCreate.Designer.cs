// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using movielandia_.net_api.Data;

#nullable disable

namespace movielandia_.net_api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250409154409_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.Actor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Debut")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoSrc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoSrcProd")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Actors");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.ActorReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActorId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<float?>("Rating")
                        .HasColumnType("real");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActorId");

                    b.HasIndex("UserId");

                    b.ToTable("ActorReviews");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.Avatar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("PhotoSrc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Avatars");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.CastMovie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActorId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActorId");

                    b.HasIndex("MovieId");

                    b.ToTable("CastMovies");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.CastSerie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActorId")
                        .HasColumnType("int");

                    b.Property<int>("SerieId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActorId");

                    b.HasIndex("SerieId");

                    b.ToTable("CastSeries");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.Crew", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Debut")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoSrc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoSrcProd")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Crews");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.CrewMovie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CrewId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CrewId");

                    b.HasIndex("MovieId");

                    b.ToTable("CrewMovies");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.CrewReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CrewId")
                        .HasColumnType("int");

                    b.Property<float?>("Rating")
                        .HasColumnType("real");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CrewId");

                    b.HasIndex("UserId");

                    b.ToTable("CrewReviews");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.CrewSerie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CrewId")
                        .HasColumnType("int");

                    b.Property<int>("SerieId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CrewId");

                    b.HasIndex("SerieId");

                    b.ToTable("CrewSeries");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.DownvoteActorReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActorId")
                        .HasColumnType("int");

                    b.Property<int>("ActorReviewId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActorId");

                    b.HasIndex("ActorReviewId");

                    b.HasIndex("UserId");

                    b.ToTable("DownvoteActorReviews");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.DownvoteCrewReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CrewId")
                        .HasColumnType("int");

                    b.Property<int>("CrewReviewId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CrewId");

                    b.HasIndex("CrewReviewId");

                    b.HasIndex("UserId");

                    b.ToTable("DownvoteCrewReviews");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.DownvoteEpisodeReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EpisodeId")
                        .HasColumnType("int");

                    b.Property<int>("EpisodeReviewId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EpisodeId");

                    b.HasIndex("EpisodeReviewId");

                    b.HasIndex("UserId");

                    b.ToTable("DownvoteEpisodeReviews");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.DownvoteMovieReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("MovieReviewId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("MovieReviewId");

                    b.HasIndex("UserId");

                    b.ToTable("DownvoteMovieReviews");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.DownvoteSeasonReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<int>("SeasonReviewId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId");

                    b.HasIndex("SeasonReviewId");

                    b.HasIndex("UserId");

                    b.ToTable("DownvoteSeasonReviews");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.DownvoteSerieReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("SerieId")
                        .HasColumnType("int");

                    b.Property<int>("SerieReviewId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SerieId");

                    b.HasIndex("SerieReviewId");

                    b.HasIndex("UserId");

                    b.ToTable("DownvoteSerieReviews");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.Episode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateAired")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("PhotoSrc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoSrcProd")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("RatingImdb")
                        .HasColumnType("real");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrailerSrc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId");

                    b.ToTable("Episodes");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.EpisodeReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EpisodeId")
                        .HasColumnType("int");

                    b.Property<float?>("Rating")
                        .HasColumnType("real");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EpisodeId");

                    b.HasIndex("UserId");

                    b.ToTable("EpisodeReviews");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateAired")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("PhotoSrc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoSrcProd")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("RatingImdb")
                        .HasColumnType("real");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrailerSrc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.MovieGenre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieGenres");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.MovieReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<float?>("Rating")
                        .HasColumnType("real");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId");

                    b.ToTable("MovieReviews");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.Season", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateAired")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoSrc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoSrcProd")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("RatingImdb")
                        .HasColumnType("real");

                    b.Property<int>("SerieId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrailerSrc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SerieId");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.SeasonReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<float?>("Rating")
                        .HasColumnType("real");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId");

                    b.HasIndex("UserId");

                    b.ToTable("SeasonReviews");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.Serie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateAired")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoSrc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoSrcProd")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("RatingImdb")
                        .HasColumnType("real");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrailerSrc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Series");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.SerieGenre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<int>("SerieId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.HasIndex("SerieId");

                    b.ToTable("SerieGenres");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.SerieReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<float?>("Rating")
                        .HasColumnType("real");

                    b.Property<int>("SerieId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SerieId");

                    b.HasIndex("UserId");

                    b.ToTable("SerieReviews");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UpvoteActorReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActorId")
                        .HasColumnType("int");

                    b.Property<int>("ActorReviewId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActorId");

                    b.HasIndex("ActorReviewId");

                    b.HasIndex("UserId");

                    b.ToTable("UpvoteActorReviews");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UpvoteCrewReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CrewId")
                        .HasColumnType("int");

                    b.Property<int>("CrewReviewId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CrewId");

                    b.HasIndex("CrewReviewId");

                    b.HasIndex("UserId");

                    b.ToTable("UpvoteCrewReviews");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UpvoteEpisodeReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EpisodeId")
                        .HasColumnType("int");

                    b.Property<int>("EpisodeReviewId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EpisodeId");

                    b.HasIndex("EpisodeReviewId");

                    b.HasIndex("UserId");

                    b.ToTable("UpvoteEpisodeReviews");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UpvoteMovieReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("MovieReviewId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("MovieReviewId");

                    b.HasIndex("UserId");

                    b.ToTable("UpvoteMovieReviews");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UpvoteSeasonReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<int>("SeasonReviewId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId");

                    b.HasIndex("SeasonReviewId");

                    b.HasIndex("UserId");

                    b.ToTable("UpvoteSeasonReviews");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UpvoteSerieReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("SerieId")
                        .HasColumnType("int");

                    b.Property<int>("SerieReviewId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SerieId");

                    b.HasIndex("SerieReviewId");

                    b.HasIndex("UserId");

                    b.ToTable("UpvoteSerieReviews");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<bool>("CanResetPassword")
                        .HasColumnType("bit");

                    b.Property<string>("CountryFrom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<bool>("Subscribed")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UserActorFavorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActorId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActorId");

                    b.HasIndex("UserId");

                    b.ToTable("UserActorFavorites");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UserActorRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActorId")
                        .HasColumnType("int");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActorId");

                    b.HasIndex("UserId");

                    b.ToTable("UserActorRatings");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UserCrewFavorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CrewId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CrewId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCrewFavorites");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UserCrewRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CrewId")
                        .HasColumnType("int");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CrewId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCrewRatings");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UserEpisodeFavorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EpisodeId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EpisodeId");

                    b.HasIndex("UserId");

                    b.ToTable("UserEpisodeFavorites");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UserEpisodeRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EpisodeId")
                        .HasColumnType("int");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EpisodeId");

                    b.HasIndex("UserId");

                    b.ToTable("UserEpisodeRatings");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UserGenreFavorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.HasIndex("UserId");

                    b.ToTable("UserGenreFavorites");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UserMovieFavorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId", "MovieId")
                        .IsUnique();

                    b.ToTable("UserMovieFavorites");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UserMovieRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId");

                    b.ToTable("UserMovieRatings");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UserSeasonFavorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSeasonFavorites");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UserSeasonRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSeasonRatings");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UserSerieFavorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("SerieId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SerieId");

                    b.HasIndex("UserId", "SerieId")
                        .IsUnique();

                    b.ToTable("UserSerieFavorites");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UserSerieRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<int>("SerieId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SerieId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSerieRatings");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.ActorReview", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Actor", "Actor")
                        .WithMany("Reviews")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithMany("ActorReviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.Avatar", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithOne("Avatar")
                        .HasForeignKey("movielandia_.net_api.Models.Domain.Avatar", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.CastMovie", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Actor", "Actor")
                        .WithMany("StarredMovies")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.Movie", "Movie")
                        .WithMany("Cast")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.CastSerie", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Actor", "Actor")
                        .WithMany("StarredSeries")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.Serie", "Serie")
                        .WithMany("Cast")
                        .HasForeignKey("SerieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Serie");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.CrewMovie", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Crew", "Crew")
                        .WithMany("ProducedMovies")
                        .HasForeignKey("CrewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.Movie", "Movie")
                        .WithMany("Crew")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crew");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.CrewReview", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Crew", "Crew")
                        .WithMany("Reviews")
                        .HasForeignKey("CrewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithMany("CrewReviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crew");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.CrewSerie", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Crew", "Crew")
                        .WithMany("ProducedSeries")
                        .HasForeignKey("CrewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.Serie", "Serie")
                        .WithMany("Crew")
                        .HasForeignKey("SerieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crew");

                    b.Navigation("Serie");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.DownvoteActorReview", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Actor", "Actor")
                        .WithMany("DownvoteActorReviews")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.ActorReview", "ActorReview")
                        .WithMany("Downvotes")
                        .HasForeignKey("ActorReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("ActorReview");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.DownvoteCrewReview", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Crew", "Crew")
                        .WithMany("DownvoteCrewReviews")
                        .HasForeignKey("CrewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.CrewReview", "CrewReview")
                        .WithMany("Downvotes")
                        .HasForeignKey("CrewReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crew");

                    b.Navigation("CrewReview");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.DownvoteEpisodeReview", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Episode", "Episode")
                        .WithMany("DownvoteEpisodeReviews")
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.EpisodeReview", "EpisodeReview")
                        .WithMany("Downvotes")
                        .HasForeignKey("EpisodeReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Episode");

                    b.Navigation("EpisodeReview");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.DownvoteMovieReview", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Movie", "Movie")
                        .WithMany("DownvoteMovieReviews")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.MovieReview", "MovieReview")
                        .WithMany("Downvotes")
                        .HasForeignKey("MovieReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("MovieReview");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.DownvoteSeasonReview", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Season", "Season")
                        .WithMany("DownvoteSeasonReviews")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.SeasonReview", "SeasonReview")
                        .WithMany("Downvotes")
                        .HasForeignKey("SeasonReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");

                    b.Navigation("SeasonReview");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.DownvoteSerieReview", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Serie", "Serie")
                        .WithMany("DownvoteSerieReviews")
                        .HasForeignKey("SerieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.SerieReview", "SerieReview")
                        .WithMany("Downvotes")
                        .HasForeignKey("SerieReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Serie");

                    b.Navigation("SerieReview");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.Episode", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Season", "Season")
                        .WithMany("Episodes")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.EpisodeReview", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Episode", "Episode")
                        .WithMany("Reviews")
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithMany("EpisodeReviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Episode");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.MovieGenre", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Genre", "Genre")
                        .WithMany("Movies")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.Movie", "Movie")
                        .WithMany("Genres")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.MovieReview", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Movie", "Movie")
                        .WithMany("Reviews")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithMany("MovieReviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.Season", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Serie", "Serie")
                        .WithMany("Seasons")
                        .HasForeignKey("SerieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Serie");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.SeasonReview", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Season", "Season")
                        .WithMany("Reviews")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithMany("SeasonReviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.SerieGenre", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Genre", "Genre")
                        .WithMany("Series")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.Serie", "Serie")
                        .WithMany("Genres")
                        .HasForeignKey("SerieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Serie");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.SerieReview", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Serie", "Serie")
                        .WithMany("Reviews")
                        .HasForeignKey("SerieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithMany("SerieReviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Serie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UpvoteActorReview", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Actor", "Actor")
                        .WithMany("UpvoteActorReviews")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.ActorReview", "ActorReview")
                        .WithMany("Upvotes")
                        .HasForeignKey("ActorReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("ActorReview");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UpvoteCrewReview", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Crew", "Crew")
                        .WithMany("UpvoteCrewReviews")
                        .HasForeignKey("CrewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.CrewReview", "CrewReview")
                        .WithMany("Upvotes")
                        .HasForeignKey("CrewReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crew");

                    b.Navigation("CrewReview");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UpvoteEpisodeReview", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Episode", "Episode")
                        .WithMany("UpvoteEpisodeReviews")
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.EpisodeReview", "EpisodeReview")
                        .WithMany("Upvotes")
                        .HasForeignKey("EpisodeReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Episode");

                    b.Navigation("EpisodeReview");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UpvoteMovieReview", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Movie", "Movie")
                        .WithMany("UpvoteMovieReviews")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.MovieReview", "MovieReview")
                        .WithMany("Upvotes")
                        .HasForeignKey("MovieReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("MovieReview");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UpvoteSeasonReview", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Season", "Season")
                        .WithMany("UpvoteSeasonReviews")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.SeasonReview", "SeasonReview")
                        .WithMany("Upvotes")
                        .HasForeignKey("SeasonReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");

                    b.Navigation("SeasonReview");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UpvoteSerieReview", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Serie", "Serie")
                        .WithMany("UpvoteSerieReviews")
                        .HasForeignKey("SerieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.SerieReview", "SerieReview")
                        .WithMany("Upvotes")
                        .HasForeignKey("SerieReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Serie");

                    b.Navigation("SerieReview");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UserActorFavorite", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Actor", "Actor")
                        .WithMany("UsersWhoBookmarkedIt")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithMany("FavActors")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UserActorRating", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Actor", "Actor")
                        .WithMany("UsersWhoRatedIt")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithMany("RatingsInActor")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UserCrewFavorite", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Crew", "Crew")
                        .WithMany("UsersWhoBookmarkedIt")
                        .HasForeignKey("CrewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithMany("FavCrew")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crew");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UserCrewRating", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Crew", "Crew")
                        .WithMany("UsersWhoRatedIt")
                        .HasForeignKey("CrewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithMany("RatingsInCrew")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crew");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UserEpisodeFavorite", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Episode", "Episode")
                        .WithMany("UsersWhoBookmarkedIt")
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithMany("FavEpisodes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Episode");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UserEpisodeRating", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Episode", "Episode")
                        .WithMany("UsersWhoRatedIt")
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithMany("RatingsInEpisode")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Episode");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UserGenreFavorite", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Genre", "Genre")
                        .WithMany("UsersWhoBookmarkedIt")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithMany("FavGenres")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UserMovieFavorite", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Movie", "Movie")
                        .WithMany("UsersWhoBookmarkedIt")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithMany("FavMovies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UserMovieRating", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Movie", "Movie")
                        .WithMany("UsersWhoRatedIt")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithMany("RatingsInMovie")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UserSeasonFavorite", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Season", "Season")
                        .WithMany("UsersWhoBookmarkedIt")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithMany("FavSeasons")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UserSeasonRating", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Season", "Season")
                        .WithMany("UsersWhoRatedIt")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithMany("RatingsInSeason")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UserSerieFavorite", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Serie", "Serie")
                        .WithMany("UsersWhoBookmarkedIt")
                        .HasForeignKey("SerieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithMany("FavSeries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Serie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.UserSerieRating", b =>
                {
                    b.HasOne("movielandia_.net_api.Models.Domain.Serie", "Serie")
                        .WithMany("UsersWhoRatedIt")
                        .HasForeignKey("SerieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("movielandia_.net_api.Models.Domain.User", "User")
                        .WithMany("RatingsInSerie")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Serie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.Actor", b =>
                {
                    b.Navigation("DownvoteActorReviews");

                    b.Navigation("Reviews");

                    b.Navigation("StarredMovies");

                    b.Navigation("StarredSeries");

                    b.Navigation("UpvoteActorReviews");

                    b.Navigation("UsersWhoBookmarkedIt");

                    b.Navigation("UsersWhoRatedIt");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.ActorReview", b =>
                {
                    b.Navigation("Downvotes");

                    b.Navigation("Upvotes");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.Crew", b =>
                {
                    b.Navigation("DownvoteCrewReviews");

                    b.Navigation("ProducedMovies");

                    b.Navigation("ProducedSeries");

                    b.Navigation("Reviews");

                    b.Navigation("UpvoteCrewReviews");

                    b.Navigation("UsersWhoBookmarkedIt");

                    b.Navigation("UsersWhoRatedIt");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.CrewReview", b =>
                {
                    b.Navigation("Downvotes");

                    b.Navigation("Upvotes");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.Episode", b =>
                {
                    b.Navigation("DownvoteEpisodeReviews");

                    b.Navigation("Reviews");

                    b.Navigation("UpvoteEpisodeReviews");

                    b.Navigation("UsersWhoBookmarkedIt");

                    b.Navigation("UsersWhoRatedIt");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.EpisodeReview", b =>
                {
                    b.Navigation("Downvotes");

                    b.Navigation("Upvotes");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.Genre", b =>
                {
                    b.Navigation("Movies");

                    b.Navigation("Series");

                    b.Navigation("UsersWhoBookmarkedIt");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.Movie", b =>
                {
                    b.Navigation("Cast");

                    b.Navigation("Crew");

                    b.Navigation("DownvoteMovieReviews");

                    b.Navigation("Genres");

                    b.Navigation("Reviews");

                    b.Navigation("UpvoteMovieReviews");

                    b.Navigation("UsersWhoBookmarkedIt");

                    b.Navigation("UsersWhoRatedIt");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.MovieReview", b =>
                {
                    b.Navigation("Downvotes");

                    b.Navigation("Upvotes");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.Season", b =>
                {
                    b.Navigation("DownvoteSeasonReviews");

                    b.Navigation("Episodes");

                    b.Navigation("Reviews");

                    b.Navigation("UpvoteSeasonReviews");

                    b.Navigation("UsersWhoBookmarkedIt");

                    b.Navigation("UsersWhoRatedIt");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.SeasonReview", b =>
                {
                    b.Navigation("Downvotes");

                    b.Navigation("Upvotes");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.Serie", b =>
                {
                    b.Navigation("Cast");

                    b.Navigation("Crew");

                    b.Navigation("DownvoteSerieReviews");

                    b.Navigation("Genres");

                    b.Navigation("Reviews");

                    b.Navigation("Seasons");

                    b.Navigation("UpvoteSerieReviews");

                    b.Navigation("UsersWhoBookmarkedIt");

                    b.Navigation("UsersWhoRatedIt");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.SerieReview", b =>
                {
                    b.Navigation("Downvotes");

                    b.Navigation("Upvotes");
                });

            modelBuilder.Entity("movielandia_.net_api.Models.Domain.User", b =>
                {
                    b.Navigation("ActorReviews");

                    b.Navigation("Avatar")
                        .IsRequired();

                    b.Navigation("CrewReviews");

                    b.Navigation("EpisodeReviews");

                    b.Navigation("FavActors");

                    b.Navigation("FavCrew");

                    b.Navigation("FavEpisodes");

                    b.Navigation("FavGenres");

                    b.Navigation("FavMovies");

                    b.Navigation("FavSeasons");

                    b.Navigation("FavSeries");

                    b.Navigation("MovieReviews");

                    b.Navigation("RatingsInActor");

                    b.Navigation("RatingsInCrew");

                    b.Navigation("RatingsInEpisode");

                    b.Navigation("RatingsInMovie");

                    b.Navigation("RatingsInSeason");

                    b.Navigation("RatingsInSerie");

                    b.Navigation("SeasonReviews");

                    b.Navigation("SerieReviews");
                });
#pragma warning restore 612, 618
        }
    }
}
